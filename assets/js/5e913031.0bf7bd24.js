"use strict";(self.webpackChunkhackfi_training=self.webpackChunkhackfi_training||[]).push([[493],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=d(n),c=l,g=m["".concat(s,".").concat(c)]||m[c]||u[c]||r;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},550:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(7462),l=(n(7294),n(3905));const r={sidebar_position:2,title:"Layout of State Variables in Storage",hide_title:!0},i=void 0,o={unversionedId:"Smart-Contracts/solidity-101/memory-layout",id:"Smart-Contracts/solidity-101/memory-layout",title:"Layout of State Variables in Storage",description:"Layout of State Variables in Storage",source:"@site/docs/Smart-Contracts/solidity-101/memory-layout.md",sourceDirName:"Smart-Contracts/solidity-101",slug:"/Smart-Contracts/solidity-101/memory-layout",permalink:"/Smart-Contracts/solidity-101/memory-layout",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Layout of State Variables in Storage",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Solidity 101",permalink:"/Smart-Contracts/solidity-101/solidity"},next:{title:"Contract ABI Specification",permalink:"/Smart-Contracts/solidity-101/contract-abi"}},s={},d=[{value:"Layout of State Variables in Storage",id:"layout-of-state-variables-in-storage",level:2},{value:"Locating Fixed-Sized Values",id:"locating-fixed-sized-values",level:3},{value:"Locating Dynamically-Sized Values",id:"locating-dynamically-sized-values",level:3},{value:"Mappings",id:"mappings",level:3},{value:"Combinations of Complex Types",id:"combinations-of-complex-types",level:3},{value:"Inheritance",id:"inheritance",level:2},{value:"delegatecall",id:"delegatecall",level:2},{value:"Table of direct types",id:"table-of-direct-types",level:3},{value:"References",id:"references",level:2}],p={toc:d};function u(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"layout-of-state-variables-in-storage"},"Layout of State Variables in Storage"),(0,l.kt)("p",null,"Every smart contract running in the Ethereum Virtual Machine (EVM) maintains state in its own permanent ",(0,l.kt)("inlineCode",{parentName:"p"},"storage"),". You can picture the storage as a very large array. Smart contract storage have 2^256 32bytes slots."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Data is stored contiguously item after item starting with the first state variable, which is stored in slot ",(0,l.kt)("inlineCode",{parentName:"li"},"0"),". "),(0,l.kt)("li",{parentName:"ul"},"For each variable, a size in bytes is determined according to its type. "),(0,l.kt)("li",{parentName:"ul"},"If two consecutive variable can fit in one slot they are packed together from right to left.")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"storage",src:n(720).Z,width:"1189",height:"372"})),(0,l.kt)("h3",{id:"locating-fixed-sized-values"},"Locating Fixed-Sized Values"),(0,l.kt)("p",null,"Variables with known fixed sizes just use reserved locations in storage. These slots are determined at ",(0,l.kt)("inlineCode",{parentName:"p"},"compile")," time, strictly based on the order in which the variables appear in the contract code."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity",metastring:"showLineNumbers",showLineNumbers:!0},"contract StorageTest {\n    uint256 a;\n    uint256[2] b;\n\n    struct Entry {\n        uint256 id;\n        uint256 value;\n    }\n    Entry c;\n}\n")),(0,l.kt)("p",null,"In the above code:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a is stored at slot 0."),(0,l.kt)("li",{parentName:"ul"},"b is stored at slots 1, and 2 (one for each element of the array)."),(0,l.kt)("li",{parentName:"ul"},"c starts at slot 3 and consumes two slots, because the Entry struct stores two 32-byte values.")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"storage fixed",src:n(2025).Z,width:"1028",height:"580"})),(0,l.kt)("h3",{id:"locating-dynamically-sized-values"},"Locating Dynamically-Sized Values"),(0,l.kt)("p",null,"Using reserved slots works well for fixed-size state variables, but it doesn\u2019t work for dynamically-sized arrays and mappings because there\u2019s no way of knowing how many slots to reserve."),(0,l.kt)("p",null,"Due to the shere amount of locations available, 2^256 slots, we can choose storage locations at random without ever experiencing a collision. Solidity uses a hash function to uniformly and repeatably compute locations for dynamically-sized values."),(0,l.kt)("p",null,"A dynamically-sized array needs a place to store its size as well as its elements."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sol",metastring:"showLineNumbers",showLineNumbers:!0},"contract StorageTest {\n    uint256 a;     // slot 0\n    uint256[2] b;  // slots 1-2\n\n    struct Entry {\n        uint256 id;\n        uint256 value;\n    }\n    Entry c;       // slots 3-4\n    Entry[] d;\n}\n")),(0,l.kt)("p",null,"In the above code, the dynamically-sized array ",(0,l.kt)("inlineCode",{parentName:"p"},"d")," is at slot 5, but the only thing that\u2019s stored there is the size of ",(0,l.kt)("inlineCode",{parentName:"p"},"d"),". The values in the array are stored consecutively starting at the ",(0,l.kt)("inlineCode",{parentName:"p"},"hash")," (",(0,l.kt)("inlineCode",{parentName:"p"},"keccak256")," hash function) of the slot."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"storage dynamic",src:n(5094).Z,width:"996",height:"509"})),(0,l.kt)("p",null,"The following Solidity function computes the location of an element of a dynamically-sized array:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sol",metastring:"showLineNumbers",showLineNumbers:!0},"function arrLocation(uint256 slot, uint256 index, uint256 elementSize)\n    public\n    pure\n    returns (uint256)\n{\n    return uint256(keccak256(slot)) + (index * elementSize);\n}\n")),(0,l.kt)("h3",{id:"mappings"},"Mappings"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sol",metastring:"showLineNumbers",showLineNumbers:!0},"contract StorageTest {\n    uint256 a;     // slot 0\n    uint256[2] b;  // slots 1-2\n\n    struct Entry {\n        uint256 id;\n        uint256 value;\n    }\n    Entry c;       // slots 3-4\n    Entry[] d;     // slot 5 for length, keccak256(5)+ for data\n\n    mapping(uint256 => uint256) e;\n    mapping(uint256 => uint256) f;\n}\n")),(0,l.kt)("p",null,"In the above code, the location for ",(0,l.kt)("inlineCode",{parentName:"p"},"e")," is slot 6, and the location for ",(0,l.kt)("inlineCode",{parentName:"p"},"f")," is slot 7, but ",(0,l.kt)("inlineCode",{parentName:"p"},"nothing")," is actually stored at those locations. There is no length to be stored."),(0,l.kt)("p",null,"To find the location of a specific value within a mapping, the ",(0,l.kt)("inlineCode",{parentName:"p"},"key")," and the ",(0,l.kt)("inlineCode",{parentName:"p"},"mapping's")," slot are ",(0,l.kt)("inlineCode",{parentName:"p"},"hashed")," together."),(0,l.kt)("p",null,"The following Solidity function computes the location of a value:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sol",metastring:"showLineNumbers",showLineNumbers:!0},"function mapLocation(uint256 slot, uint256 key) public pure returns (uint256) {\n    return uint256(keccak256(key, slot));\n}\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Storage mapping",src:n(7383).Z,width:"1336",height:"476"})),(0,l.kt)("h3",{id:"combinations-of-complex-types"},"Combinations of Complex Types"),(0,l.kt)("p",null,"Dynamically-sized ",(0,l.kt)("inlineCode",{parentName:"p"},"arrays")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"mappings")," can be nested within each other recursively. When that happens, the location of a value is found by recursively applying the calculations defined above."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sol",metastring:"showLineNumbers",showLineNumbers:!0},"contract StorageTest {\n    uint256 a;     // slot 0\n    uint256[2] b;  // slots 1-2\n\n    struct Entry {\n        uint256 id;\n        uint256 value;\n    }\n    Entry c;       // slots 3-4\n    Entry[] d;     // slot 5 for length, keccak256(5)+ for data\n\n    mapping(uint256 => uint256) e;    // slot 6, data at h(k . 6)\n    mapping(uint256 => uint256) f;    // slot 7, data at h(k . 7)\n\n    mapping(uint256 => uint256[]) g;  // slot 8\n    mapping(uint256 => uint256)[] h;  // slot 9\n}\n")),(0,l.kt)("p",null,"To find items within these complex types, we can use the functions defined above. "),(0,l.kt)("p",null,"To find g","[123][0]",":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sol"},"// first find arr = g[123]\narrLoc = mapLocation(8, 123);  // g is at slot 8\n\n// then find arr[0]\nitemLoc = arrLocation(arrLoc, 0, 1);\n")),(0,l.kt)("p",null,"To find h","[2][456]",":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sol"},"// first find map = h[2]\nmapLoc = arrLocation(9, 2, 1);  // h is at slot 9\n\n// then find map[456]\nitemLoc = mapLocation(mapLoc, 456);\n")),(0,l.kt)("p",null,"You can use ",(0,l.kt)("inlineCode",{parentName:"p"},"cast")," command that comes with foundry to inspect the storage of a contract:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"cast storage  -r https://eth-rpc.gateway.pokt.network 0x6D2299C48a8dD07a872FDd0F8233924872Ad1071 1\ncast storage  -r https://eth-rpc.gateway.pokt.network 0x6D2299C48a8dD07a872FDd0F8233924872Ad1071 0x0758364a4f55624097844647de7675b993ad2ed16003efa84065140c0c0b48ae\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"cast storage dump",src:n(7474).Z,width:"1351",height:"152"})),(0,l.kt)("p",null,"Dedaub provides an awesome toolkit to check the storage of a contract.\nExample: ",(0,l.kt)("a",{parentName:"p",href:"https://library.dedaub.com/contracts/Ethereum/6D2299C48A8DD07A872FDD0F8233924872AD1071/storage-dump"},"https://library.dedaub.com/contracts/Ethereum/6D2299C48A8DD07A872FDD0F8233924872AD1071/storage-dump")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Dedaub Library",src:n(2096).Z,width:"1762",height:"2050"})),(0,l.kt)("h2",{id:"inheritance"},"Inheritance"),(0,l.kt)("p",null,"In a contract that inherits, the assignment works as follows: "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"first, the slots are allocated to the inherited variables, from the leftmost contract to the rightmost"),(0,l.kt)("li",{parentName:"ul"},"finishing with the current contract.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sol",metastring:"showLineNumbers",showLineNumbers:!0},'contract Hello {\n    string public hello = "Hello!";\n}\n\ncontract World {\n    string public world = "World!";\n}\n\ncontract HelloWorld is Hello, World {\n    string private greet = "Hello World!";\n\n    function getGreeting() public view returns(string memory) {\n        return greet;\n    }\n\n    function getHello() public view returns(string memory) {\n        return hello;\n    }\n\n    function getWorld() public view returns(string memory) {\n        return world;\n    }\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hello")," gets assigned slot ",(0,l.kt)("inlineCode",{parentName:"li"},"0")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"world")," gets assigned slot ",(0,l.kt)("inlineCode",{parentName:"li"},"1")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"greet")," gets assigned slot ",(0,l.kt)("inlineCode",{parentName:"li"},"2"))),(0,l.kt)("h2",{id:"delegatecall"},"delegatecall"),(0,l.kt)("admonition",{title:"delegatecall recap",type:"danger"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"The function ",(0,l.kt)("inlineCode",{parentName:"li"},"delegatecall")," can be used similar to ",(0,l.kt)("inlineCode",{parentName:"li"},"call"),": the main difference is that only the code of the given ",(0,l.kt)("inlineCode",{parentName:"li"},"address")," is used, all other aspects (",(0,l.kt)("inlineCode",{parentName:"li"},"storage"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"balance"),", \u2026) are taken from the ",(0,l.kt)("inlineCode",{parentName:"li"},"current")," ",(0,l.kt)("inlineCode",{parentName:"li"},"contract"),". "),(0,l.kt)("li",{parentName:"ul"},"The purpose of ",(0,l.kt)("inlineCode",{parentName:"li"},"delegatecall")," is to use ",(0,l.kt)("inlineCode",{parentName:"li"},"library")," code which is stored in another contract. "),(0,l.kt)("li",{parentName:"ul"},"The user has to ensure that the layout of storage in both contracts is suitable for ",(0,l.kt)("inlineCode",{parentName:"li"},"delegatecall")," to be used."))),(0,l.kt)("p",null,"Challenge:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sol",metastring:"title=library.sol showLineNumbers",title:"library.sol",showLineNumbers:!0},"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\n// Simple library contract to set the time\ncontract LibraryContract {\n\n  // stores a timestamp \n  uint storedTime;  \n\n  function setTime(uint _time) public {\n    storedTime = _time;\n  }\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sol",metastring:"showLineNumbers title=Preservation.sol",showLineNumbers:!0,title:"Preservation.sol"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ncontract Preservation {\n\n  // public library contracts \n  address public timeZone1Library;\n  address public timeZone2Library;\n  address public owner; \n  uint storedTime;\n  // Sets the function signature for delegatecall\n  bytes4 constant setTimeSignature = bytes4(keccak256("setTime(uint256)"));\n\n  constructor(address _timeZone1LibraryAddress, address _timeZone2LibraryAddress) public {\n    timeZone1Library = _timeZone1LibraryAddress; \n    timeZone2Library = _timeZone2LibraryAddress; \n    owner = msg.sender;\n  }\n \n  // set the time for timezone 1\n  function setFirstTime(uint _timeStamp) public {\n    timeZone1Library.delegatecall(abi.encodePacked(setTimeSignature, _timeStamp));\n  }\n\n  // set the time for timezone 2\n  function setSecondTime(uint _timeStamp) public {\n    timeZone2Library.delegatecall(abi.encodePacked(setTimeSignature, _timeStamp));\n  }\n}\n')),(0,l.kt)("p",null,"Memory layout of Preservation:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"slot0")," : timeZone1Library"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"slot1")," : timeZone2Library"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"slot2")," : owner"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"slot3")," : storedTime")),(0,l.kt)("p",null,"Exploit: Overwrite ",(0,l.kt)("inlineCode",{parentName:"p"},"timeZone1Library")," variable with our own ",(0,l.kt)("inlineCode",{parentName:"p"},"Exploit")," contract address; and call ",(0,l.kt)("inlineCode",{parentName:"p"},"setTime")," on our Exploit contract address, that just modifies ",(0,l.kt)("inlineCode",{parentName:"p"},"owner")," variable"),(0,l.kt)("p",null,"Excercise: Try to solve the following Ethernaut challenges:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://ethernaut.openzeppelin.com/level/0xf94b476063B6379A3c8b6C836efB8B3e10eDe188"},"https://ethernaut.openzeppelin.com/level/0xf94b476063B6379A3c8b6C836efB8B3e10eDe188")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://ethernaut.openzeppelin.com/level/0x11343d543778213221516D004ED82C45C3c8788B"},"https://ethernaut.openzeppelin.com/level/0x11343d543778213221516D004ED82C45C3c8788B")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://ethernaut.openzeppelin.com/level/0x97E982a15FbB1C28F6B8ee971BEc15C78b3d263F"},"https://ethernaut.openzeppelin.com/level/0x97E982a15FbB1C28F6B8ee971BEc15C78b3d263F"))),(0,l.kt)("h3",{id:"table-of-direct-types"},"Table of direct types"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Size in storage (bytes)"),(0,l.kt)("th",{parentName:"tr",align:null},"Padding in padded locations"),(0,l.kt)("th",{parentName:"tr",align:null},"Default value"),(0,l.kt)("th",{parentName:"tr",align:null},"Is key type?"),(0,l.kt)("th",{parentName:"tr",align:null},"Allowed in calldata?"),(0,l.kt)("th",{parentName:"tr",align:null},"Allowed as immutable?"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"Zero padded, left"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"uintN")),(0,l.kt)("td",{parentName:"tr",align:null},"N/8"),(0,l.kt)("td",{parentName:"tr",align:null},"Zero-padded, left","*"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"intN")),(0,l.kt)("td",{parentName:"tr",align:null},"N/8"),(0,l.kt)("td",{parentName:"tr",align:null},"Sign-padded, left","*"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"address [payable]")),(0,l.kt)("td",{parentName:"tr",align:null},"20"),(0,l.kt)("td",{parentName:"tr",align:null},"Zero-padded, left","*"),(0,l.kt)("td",{parentName:"tr",align:null},"Zero address (not valid!)"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"contract")," types"),(0,l.kt)("td",{parentName:"tr",align:null},"20"),(0,l.kt)("td",{parentName:"tr",align:null},"Zero-padded, left","*"),(0,l.kt)("td",{parentName:"tr",align:null},"Zero address (not valid!)"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bytesN")),(0,l.kt)("td",{parentName:"tr",align:null},"N"),(0,l.kt)("td",{parentName:"tr",align:null},"Zero-padded, right","*"),(0,l.kt)("td",{parentName:"tr",align:null},"All zeroes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"enum")," types"),(0,l.kt)("td",{parentName:"tr",align:null},"As many as needed to hold all possibilities"),(0,l.kt)("td",{parentName:"tr",align:null},"Zero-padded, left"),(0,l.kt)("td",{parentName:"tr",align:null},"Whichever possibility is represented by 0"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"function internal")),(0,l.kt)("td",{parentName:"tr",align:null},"8"),(0,l.kt)("td",{parentName:"tr",align:null},"Zero-padded, left"),(0,l.kt)("td",{parentName:"tr",align:null},"Depends on location, but always invalid"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"function external")),(0,l.kt)("td",{parentName:"tr",align:null},"24"),(0,l.kt)("td",{parentName:"tr",align:null},"Zero-padded, right, except on stack"),(0,l.kt)("td",{parentName:"tr",align:null},"Zero address, zero selector (not valid!)"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"No")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ufixedMxN")),(0,l.kt)("td",{parentName:"tr",align:null},"M/8"),(0,l.kt)("td",{parentName:"tr",align:null},"Zero-padded, left","*"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"fixedMxN")),(0,l.kt)("td",{parentName:"tr",align:null},"M/8"),(0,l.kt)("td",{parentName:"tr",align:null},"Sign-padded, left","*"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"User-defined value types"),(0,l.kt)("td",{parentName:"tr",align:null},"Same as underlying type (except in 0.8.8)"),(0,l.kt)("td",{parentName:"tr",align:null},"Same as underlying type","*"),(0,l.kt)("td",{parentName:"tr",align:null},"Same as underlying type"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,l.kt)("h2",{id:"references"},"References"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://docs.soliditylang.org/en/v0.8.16/internals/layout_in_storage.html"},"Layout of State Variables in Storage")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/willitscale/learning-solidity/blob/master/support/NESTED_ARRAYS_NOT_IMPLEMENTED.MD"},"NESTED_ARRAYS_NOT_IMPLEMENTED")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://programtheblockchain.com/posts/2018/03/09/understanding-ethereum-smart-contract-storage/"},"Understanding Ethereum Smart Contract Storage")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://ethdebug.github.io/solidity-data-representation/"},"Data Representation in Solidity"))))}u.isMDXComponent=!0},7474:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cast-storage-dump-3a7687519eed87c1d5f4fe2e4d26f50c.png"},2096:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dedaub-storage-dump-498c7ec8c43cee4b58834e1e5ec36037.png"},5094:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/storage-dynamic-ca35efcee553c57feb4ff0739ad0b1f9.png"},2025:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/storage-fixed-27bde79484d07478bb40926ac8fdda2c.png"},7383:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/storage-mapping-bb02c5403e553fbd6a1537c20a83e4b6.png"},720:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/storage-6bfe57dd230c4076d60eaee67268256c.png"}}]);