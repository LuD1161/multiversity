"use strict";(self.webpackChunkhackfi_training=self.webpackChunkhackfi_training||[]).push([[6526],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>p});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),c=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=c(t.components);return a.createElement(s.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,s=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),m=c(n),p=r,h=m["".concat(s,".").concat(p)]||m[p]||d[p]||i;return n?a.createElement(h,o(o({ref:e},u),{},{components:n})):a.createElement(h,o({ref:e},u))}));function p(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3267:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:2,title:"Static and Dynamic Analysis",hide_title:!0,slug:"/tools/tools"},o=void 0,l={unversionedId:"Tools/tools",id:"Tools/tools",title:"Static and Dynamic Analysis",description:"Static and Dynamic Analysis",source:"@site/docs/Tools/tools.md",sourceDirName:"Tools",slug:"/tools/tools",permalink:"/tools/tools",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Static and Dynamic Analysis",hide_title:!0,slug:"/tools/tools"},sidebar:"tutorialSidebar",previous:{title:"ToC",permalink:"/tools/index"},next:{title:"Decompilers, Emulators and More",permalink:"/tools/decompilers-emulator-and-more"}},s={},c=[{value:"Static and Dynamic Analysis",id:"static-and-dynamic-analysis",level:2},{value:"Static Source Code Analysis",id:"static-source-code-analysis",level:3},{value:"Visualization Tools",id:"visualization-tools",level:3},{value:"Dynamic Analysis",id:"dynamic-analysis",level:3},{value:"Slither",id:"slither",level:2},{value:"Echinda",id:"echinda",level:2},{value:"Foundry Fuzzing",id:"foundry-fuzzing",level:2},{value:"References",id:"references",level:2}],u={toc:c};function d(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"static-and-dynamic-analysis"},"Static and Dynamic Analysis"),(0,r.kt)("h3",{id:"static-source-code-analysis"},"Static Source Code Analysis"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/crytic/slither"},"Slither"),": Static analysis framework with detectors for many common Solidity issues. It has taint and value tracking capabilities and is written in Python."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://library.dedaub.com/contracts/hottest"},"Contract Library"),": Decompiler and security analysis tool for all deployed contracts."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/nevillegrech/MadMax"},"MadMax"),": Static analysis tool for gas DoS vulnerabilities."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/nevillegrech/gigahorse-toolchain"},"Gigahorse"),": Fast binary lifter and program analysis framework written in Datalog."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/eth-sri/securify2"},"Securify"),": Securify 2.0 is a security scanner for Ethereum smart contracts based on the research paper ",(0,r.kt)("a",{parentName:"li",href:"https://files.sri.inf.ethz.ch/website/papers/ccs18-securify.pdf"},"Securify: Practical Security Analysis of Smart Contracts"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/enzymefinance/oyente"},"Oyente"),": Analyze Ethereum code to find common vulnerabilities, based on the research paper ",(0,r.kt)("a",{parentName:"li",href:"https://www.comp.nus.edu.sg/~prateeks/papers/Oyente.pdf"},"Making Smart Contracts Smarter"),".")),(0,r.kt)("h3",{id:"visualization-tools"},"Visualization Tools"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/ConsenSys/vscode-solidity-auditor"},"Solidity Visual Auditor"),": This extension contributes security centric syntax and semantic highlighting, a detailed class outline and advanced Solidity code insights to Visual Studio Code"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/ConsenSys/surya"},"Surya"),": Utility tool for smart contract systems, offering a number of visual outputs and information about the contracts' structure. Also supports querying the function call graph."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/tintinweb/vscode-ethereum-security-bundle"},"VSCode Ethereum Security Bundle"),": A meta-extension bundling vscode marketplace plugins for secure Ethereum smart contract development.")),(0,r.kt)("h3",{id:"dynamic-analysis"},"Dynamic Analysis"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/ConsenSys/mythril"},"Mythril"),": The Swiss army knife for smart contract security. It uses symbolic execution, SMT solving and taint analysis to detect a variety of security vulnerabilities."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.certora.com/"},"Certora")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/crytic/echidna"},"Echidna"),": The only available fuzzer for Ethereum software. Uses property testing to generate malicious inputs that break smart contracts."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/trailofbits/manticore"},"Manticore"),": Dynamic binary analysis tool with EVM support."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/JoranHonig/vertigo"},"Vertigo")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/FuzzingLabs/octopus"},"Octopus"),": Security Analysis tool for Blockchain Smart Contracts with support of EVM and (e)WASM."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/duytai/sFuzz"},"sFuzz"),": Efficient fuzzer inspired from AFL to find common vulnerabilities."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/ethereum/evmlab"},"EVM lab"),": Rich tool package to interact with the EVM. Includes a VM, Etherchain API, and a trace-viewer."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/fergarrui/ethereum-graph-debugger"},"ethereum-graph-debugger"),": Graphical EVM debugger."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/ant4g0nist/chinfuzz"},"chinfuzz by ant4g0nist"),": Tezos smart contract fuzzer"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/MariusVanDerWijden/FuzzyVM"},"FuzzyVM"))),(0,r.kt)("h2",{id:"slither"},"Slither"),(0,r.kt)("p",null,"Slither usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'coder@training:~/labs/not-so-smart-contracts/denial_of_service$ slither -h\nusage: slither target [flag]\n\ntarget can be:\n        - file.sol // a Solidity file\n        - project_directory // a project directory. See https://github.com/crytic/crytic-compile/#crytic-compile for the supported platforms\n        - 0x.. // a contract on mainet\n        - NETWORK:0x.. // a contract on a different network. Supported networks: mainet,ropsten,kovan,rinkeby,goerli,tobalaba,bsc,testnet.bsc,arbi,testnet.arbi,poly,avax,testnet.avax,ftm\n\nFor usage information, see https://github.com/crytic/slither/wiki/Usage\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             displays the current version\n\nCompile options:\n  --compile-force-framework COMPILE_FORCE_FRAMEWORK\n                        Force the compile to a given framework (solc,truffle,embark,dapp,etherlime,etherscan,vyper,waffle,brownie,solc-\n                        json,buidler,hardhat,foundry,standard,archive)\n  --compile-remove-metadata\n                        Remove the metadata from the bytecodes\n  --compile-custom-build COMPILE_CUSTOM_BUILD\n                        Replace platform specific build command\n  --ignore-compile      Do not run compile of any platform\n\nSolc options:\n  --solc SOLC           solc path\n  --solc-remaps SOLC_REMAPS\n                        Add remapping\n  --solc-args SOLC_ARGS\n                        Add custom solc arguments. Example: --solc-args "--allow-path /tmp --evm-version byzantium".\n  --solc-disable-warnings\n                        Disable solc warnings\n  --solc-working-dir SOLC_WORKING_DIR\n                        Change the default working directory\n  --solc-solcs-select SOLC_SOLCS_SELECT\n                        Specify different solc version to try (env config). Depends on solc-select\n  --solc-solcs-bin SOLC_SOLCS_BIN\n                        Specify different solc version to try (path config). Example: --solc-solcs-bin solc-0.4.24,solc-0.5.3\n  --solc-standard-json  Compile all specified targets in a single compilation using solc standard json\n  --solc-force-legacy-json\n                        Force the solc compiler to use the legacy json ast format over the compact json ast format\n\nTruffle options:\n  --truffle-ignore-compile\n                        Do not run truffle compile\n  --truffle-build-directory TRUFFLE_BUILD_DIRECTORY\n                        Use an alternative truffle build directory\n  --truffle-version TRUFFLE_VERSION\n                        Use a local Truffle version (with npx)\n  --truffle-overwrite-config\n                        Use a simplified version of truffle-config.js for compilation\n  --truffle-overwrite-version TRUFFLE_OVERWRITE_VERSION\n                        Overwrite solc version in truffle-config.js (only if --truffle-overwrite-config)\n\nEmbark options:\n  --embark-ignore-compile\n                        Do not run embark build\n  --embark-overwrite-config\n                        Install @trailofbits/embark-contract-export and add it to embark.json\n\nDapp options:\n  --dapp-ignore-compile\n                        Do not run dapp build\n\nEtherlime options:\n  --etherlime-ignore-compile\n                        Do not run etherlime compile\n  --etherlime-compile-arguments\n                        Add arbitrary arguments to etherlime compile (note: [dir] is the the directory provided to crytic-compile)\n\nEtherscan options:\n  --etherscan-only-source-code\n                        Only compile if the source code is available.\n  --etherscan-only-bytecode\n                        Only looks for bytecode.\n  --etherscan-apikey ETHERSCAN_API_KEY\n                        Etherscan API key.\n  --arbiscan-apikey ARBISCAN_API_KEY\n                        Etherscan API key.\n  --polygonscan-apikey POLYGONSCAN_API_KEY\n                        Etherscan API key.\n  --avax-apikey AVAX_API_KEY\n                        Etherscan API key.\n  --ftmscan-apikey FTMSCAN_API_KEY\n                        Etherscan API key.\n  --bscan-apikey BSCAN_API_KEY\n                        Etherscan API key.\n  --etherscan-export-directory ETHERSCAN_EXPORT_DIR\n                        Directory in which to save the analyzed contracts.\n\nWaffle options:\n  --waffle-ignore-compile\n                        Do not run waffle compile\n  --waffle-config-file WAFFLE_CONFIG_FILE\n                        Provide a waffle config file\n\nNPX options:\n  --npx-disable         Do not use npx\n\nBuidler options:\n  --buidler-ignore-compile\n                        Do not run buidler compile\n  --buidler-cache-directory BUIDLER_CACHE_DIRECTORY\n                        Use an alternative buidler cache directory (default ./cache)\n  --buidler-skip-directory-name-fix\n                        Disable directory name fix (see https://github.com/crytic/crytic-compile/issues/116)\n\nhardhat options:\n  --hardhat-ignore-compile\n                        Do not run hardhat compile\n  --hardhat-cache-directory HARDHAT_CACHE_DIRECTORY\n                        Use an alternative hardhat cache directory (default ./cache)\n  --hardhat-artifacts-directory HARDHAT_ARTIFACTS_DIRECTORY\n                        Use an alternative hardhat artifacts directory (default ./artifacts)\n\nDetectors:\n  --detect DETECTORS_TO_RUN\n                        Comma-separated list of detectors, defaults to all, available detectors: abiencoderv2-array, arbitrary-send, array-by-reference, controlled-\n                        array-length, assembly, assert-state-change, backdoor, weak-prng, boolean-cst, boolean-equal, shadowing-builtin, constable-states, constant-\n                        function-asm, constant-function-state, pragma, controlled-delegatecall, costly-loop, dead-code, delegatecall-loop, deprecated-standards,\n                        divide-before-multiply, enum-conversion, external-function, function-init-state, erc20-interface, erc721-interface, solc-version, incorrect-\n                        equality, incorrect-unary, shadowing-local, locked-ether, low-level-calls, mapping-deletion, events-access, events-maths, missing-\n                        inheritance, missing-zero-check, incorrect-modifier, msg-value-loop, calls-loop, multiple-constructors, name-reused, naming-convention,\n                        variable-scope, protected-vars, public-mappings-nested, redundant-statements, reentrancy-benign, reentrancy-eth, reentrancy-events,\n                        reentrancy-unlimited-gas, reentrancy-no-eth, reused-constructor, rtlo, shadowing-abstract, incorrect-shift, similar-names, shadowing-state,\n                        storage-array, suicidal, timestamp, too-many-digits, tx-origin, tautology, unchecked-lowlevel, unchecked-send, unchecked-transfer,\n                        unimplemented-functions, erc20-indexed, uninitialized-fptr-cst, uninitialized-local, uninitialized-state, uninitialized-storage, unprotected-\n                        upgrade, unused-return, unused-state, void-cst, write-after-write\n  --list-detectors      List available detectors\n  --exclude DETECTORS_TO_EXCLUDE\n                        Comma-separated list of detectors that should be excluded\n  --exclude-dependencies\n                        Exclude results that are only related to dependencies\n  --exclude-optimization\n                        Exclude optimization analyses\n  --exclude-informational\n                        Exclude informational impact analyses\n  --exclude-low         Exclude low impact analyses\n  --exclude-medium      Exclude medium impact analyses\n  --exclude-high        Exclude high impact analyses\n  --show-ignored-findings\n                        Show all the findings\n\nPrinters:\n  --print PRINTERS_TO_RUN\n                        Comma-separated list fo contract information printers, available printers: cfg, constructor-calls, contract-summary, data-dependency,\n                        echidna, function-id, function-summary, modifiers, call-graph, evm, human-summary, inheritance, inheritance-graph, slithir, slithir-ssa,\n                        pausable, vars-and-auth, require, variable-order\n  --list-printers       List available printers\n\nAdditional options:\n  --json JSON           Export the results as a JSON file ("--json -" to export to stdout)\n  --sarif SARIF         Export the results as a SARIF JSON file ("--sarif -" to export to stdout)\n  --json-types JSON_TYPES\n                        Comma-separated list of result types to output to JSON, defaults to detectors,printers. Available types:\n                        compilations,console,detectors,printers,list-detectors,list-printers\n  --zip ZIP             Export the results as a zipped JSON file\n  --zip-type ZIP_TYPE   Zip compression type. One of lzma,stored,deflated,bzip2. Default lzma\n  --markdown-root MARKDOWN_ROOT\n                        URL for markdown generation\n  --disable-color       Disable output colorization\n  --filter-paths FILTER_PATHS\n                        Comma-separated list of paths for which results will be excluded\n  --triage-mode         Run triage mode (save results in slither.db.json)\n  --config-file CONFIG_FILE\n                        Provide a config file (default: slither.config.json)\n  --solc-ast            Provide the contract as a json AST\n  --generate-patches    Generate patches (json output only)\n')),(0,r.kt)("p",null,"Slither available printers:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Num"),(0,r.kt)("th",{parentName:"tr",align:null},"Printer"),(0,r.kt)("th",{parentName:"tr",align:null},"What it Does"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"call-graph"),(0,r.kt)("td",{parentName:"tr",align:null},"Export the call-graph of the contracts to a dot file")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"cfg"),(0,r.kt)("td",{parentName:"tr",align:null},"Export the CFG of each functions")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"constructor-calls"),(0,r.kt)("td",{parentName:"tr",align:null},"Print the constructors executed")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"contract-summary"),(0,r.kt)("td",{parentName:"tr",align:null},"Print a summary of the contracts")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},"data-dependency"),(0,r.kt)("td",{parentName:"tr",align:null},"Print the data dependencies of the variables")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"6"),(0,r.kt)("td",{parentName:"tr",align:null},"echidna"),(0,r.kt)("td",{parentName:"tr",align:null},"Export Echidna guiding information")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"7"),(0,r.kt)("td",{parentName:"tr",align:null},"evm"),(0,r.kt)("td",{parentName:"tr",align:null},"Print the evm instructions of nodes in functions")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"8"),(0,r.kt)("td",{parentName:"tr",align:null},"function-id"),(0,r.kt)("td",{parentName:"tr",align:null},"Print the keccack256 signature of the functions")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"9"),(0,r.kt)("td",{parentName:"tr",align:null},"function-summary"),(0,r.kt)("td",{parentName:"tr",align:null},"Print a summary of the functions")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},"human-summary"),(0,r.kt)("td",{parentName:"tr",align:null},"Print a human-readable summary of the contracts")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"11"),(0,r.kt)("td",{parentName:"tr",align:null},"inheritance"),(0,r.kt)("td",{parentName:"tr",align:null},"Print the inheritance relations between contracts")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"12"),(0,r.kt)("td",{parentName:"tr",align:null},"inheritance-graph"),(0,r.kt)("td",{parentName:"tr",align:null},"Export the inheritance graph of each contract to a dot file")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"13"),(0,r.kt)("td",{parentName:"tr",align:null},"modifiers"),(0,r.kt)("td",{parentName:"tr",align:null},"Print the modifiers called by each function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"14"),(0,r.kt)("td",{parentName:"tr",align:null},"pausable"),(0,r.kt)("td",{parentName:"tr",align:null},"Print functions that do not use whenNotPaused")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"15"),(0,r.kt)("td",{parentName:"tr",align:null},"require"),(0,r.kt)("td",{parentName:"tr",align:null},"Print the require and assert calls of each function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"16"),(0,r.kt)("td",{parentName:"tr",align:null},"slithir"),(0,r.kt)("td",{parentName:"tr",align:null},"Print the slithIR representation of the functions")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"17"),(0,r.kt)("td",{parentName:"tr",align:null},"slithir-ssa"),(0,r.kt)("td",{parentName:"tr",align:null},"Print the slithIR representation of the functions")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"18"),(0,r.kt)("td",{parentName:"tr",align:null},"variable-order"),(0,r.kt)("td",{parentName:"tr",align:null},"Print the storage order of the state variables")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"19"),(0,r.kt)("td",{parentName:"tr",align:null},"vars-and-auth"),(0,r.kt)("td",{parentName:"tr",align:null},"Print the state variables written and the authorization of the functions")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"coder@training:~/labs/not-so-smart-contracts/denial_of_service$ slither --print contract-summary auction.sol \nCompilation warnings/errors on auction.sol:\nauction.sol:51:5: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.\n    msg.sender.send(refund);\n    ^---------------------^\n\n\n+ Contract DosAuction (Most derived contract)\n  - From DosAuction\n    - bid() (public)\n\n+ Contract SecureAuction (Most derived contract)\n  - From SecureAuction\n    - bid() (external)\n    - withdraw() (external)\n\nauction.sol analyzed (2 contracts)\ncoder@training:~/labs/not-so-smart-contracts/denial_of_service$ slither --print human-summary auction.sol \nCompilation warnings/errors on auction.sol:\nauction.sol:51:5: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.\n    msg.sender.send(refund);\n    ^---------------------^\n\n\nCompiled with solc\nNumber of lines: 53 (+ 0 in dependencies, + 0 in tests)\nNumber of assembly lines: 0\nNumber of contracts: 2 (+ 0 in dependencies, + 0 tests) \n\nNumber of optimization issues: 1\nNumber of informational issues: 3\nNumber of low issues: 0\nNumber of medium issues: 1\nNumber of high issues: 0\n\n\n+---------------+-------------+------+------------+--------------+-------------+\n|      Name     | # functions | ERCS | ERC20 info | Complex code |   Features  |\n+---------------+-------------+------+------------+--------------+-------------+\n|   DosAuction  |      1      |      |            |      No      | Receive ETH |\n|               |             |      |            |              |   Send ETH  |\n| SecureAuction |      2      |      |            |      No      | Receive ETH |\n|               |             |      |            |              |   Send ETH  |\n+---------------+-------------+------+------------+--------------+-------------+\nauction.sol analyzed (2 contracts)\ncoder@training:~/labs/not-so-smart-contracts/denial_of_service$ \n")),(0,r.kt)("h2",{id:"echinda"},"Echinda"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=kAfknRlvAt0"},"Fuzzing Tools Series: Echidna")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://blog.trailofbits.com/2018/03/09/echidna-a-smart-fuzzer-for-ethereum/"},"Echidna, a smart fuzzer for Ethereum")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://blog.trailofbits.com/2020/08/17/using-echidna-to-test-a-smart-contract-library/"},"Using Echidna to test a smart contract library")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://0xmacro.com/blog/fuzzing-with-echidna/"},"Fuzzing with Echidna"))),(0,r.kt)("h2",{id:"foundry-fuzzing"},"Foundry Fuzzing"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://book.getfoundry.sh/forge/fuzz-testing"},"Fuzz Testing")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=pgh74-XulXg"},"Testing with Foundry"))),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.certora.com/#Education"},"https://www.certora.com/#Education")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://consensys.github.io/smart-contract-best-practices/security-tools/"},"https://consensys.github.io/smart-contract-best-practices/security-tools/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://mythx.io/"},"MythX")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://blog.trailofbits.com/2018/10/19/slither-a-solidity-static-analysis-framework/"},"Slither \u2013 a Solidity static analysis framework"))))}d.isMDXComponent=!0}}]);